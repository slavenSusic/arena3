---
import Icon from "./Icon.astro"
---
<theme-toggle>
<button  id="darkToggle"
class=" dark:transparent bg-transparent rounded-full border-2 border-green-500 h-10 w-20 cursor-pointer flex items-center justify-center z-50 transition-all duration-500"
x-on:click="darkMode = (darkMode == 'dark') ? 'light' : 'dark'">
  <span class="sr-only">Dark theme</span>
  <span class="icon light"><Icon icon="sun" /></span>
  <span class="icon dark"><Icon icon="moon-stars" /></span>
</button>
</theme-toggle>
<style>
  
  <style>
	button {
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0;
		background-color: var(--gray-999);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		cursor: pointer;
	}

	.icon {
		z-index: 1;
		position: relative;
		display: flex;
		padding: 0.5rem;
		width: 2rem;
		height: 2rem;
		font-size: 1rem;
		color: var(--accent-overlay);
	}

	.icon.light::before {
		content: '';
		z-index: -1;
		position: absolute;
		inset: 0;
		background-color: var(--accent-regular);
		border-radius: 999rem;
	}

	:global(.theme-dark) .icon.light::before {
		transform: translateX(100%);
	}

	:global(.theme-dark) .icon.dark,
	:global(html:not(.theme-dark)) .icon.light,
	button[aria-pressed='false'] .icon.light {
		color: var(--accent-text-over);
	}

	@media (prefers-reduced-motion: no-preference) {
		.icon,
		.icon.light::before {
			transition:
				transform var(--theme-transition),
				color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.icon.light::before {
			background-color: SelectedItem;
		}
	}
</style>
</style>

<script>
 	class ThemeToggle extends HTMLElement {
		constructor() {
			super();

			const button = this.querySelector('button')!;

			/** Set the theme to dark/light mode. */
			const setTheme = (dark: boolean) => {
				document.documentElement.classList[dark ? 'add' : 'remove']('theme-dark');
				button.setAttribute('aria-pressed', String(dark));
			};

			// Toggle the theme when a user clicks the button.
			button.addEventListener('click', () => setTheme(!this.isDark()));

			// Initialize button state to reflect current theme.
			setTheme(this.isDark());
		}

		isDark() {
			return document.documentElement.classList.contains('theme-dark');
		}
	}
	customElements.define('theme-toggle', ThemeToggle);
</script>
    <!-- <style>
        .theme-switch-wrapper {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

.theme-switch {
  display: inline-block;
  height: 34px;
  position: relative;
  width: 60px;
}

.theme-switch input {
  display: none;
}

.slider {
  background-color: var(--slider-bg);
  bottom: 0;
  cursor: pointer;
  left: 50px;
  position: absolute;
  right: 0;
  top: 0;
  transition: 1.4s;
  border-radius: 34px;
}

.slider:before {
  background-color: var(--slider-bg-before);
  bottom: 4px;
  content: "";
  height: 26px;
  left: 4px;
  position: absolute;
  transition: 0.4s;
  width: 26px;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: var(--slider-input-bg);
}

input:checked + .slider:before {
  transform: translateX(26px);
}

.slider svg {
  color: #881717;
  position: absolute;
  transition: opacity 0.2s ease 0s, transform 0.35s ease 0s;
  pointer-events: none;
}

.feather-moon {
  opacity: 0;
  left: 9px;
  bottom: 9px;
  transform: translateX(40px);
}

.feather-sun {
  opacity: 1;
  right: 10px;
  bottom: 9px;
  transform: translateX(330px);
}

input:checked + .slider .feather-moon {
  opacity: 1;
  transform: translateX(0);
}

input:checked + .slider .feather-sun {
  opacity: 0;
  transform: translateX(-40spx);
}
    </style> -->